import { ApiProperty } from '@nestjs/swagger';

/**
 * DTO for the response of the asynchronous pipeline start endpoint.
 */
export class AsyncResponseDto {
  @ApiProperty({
    example: 'Pipeline job accepted. Check status using the jobId.',
    description: 'A message confirming the job was accepted.',
  })
  message: string;

  @ApiProperty({
    example: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d',
    description: 'The unique ID of the job in the queue.',
  })
  jobId: string;

  @ApiProperty({
    example: 'unique-client-request-id-12345',
    description: 'The request ID provided by the client for idempotency.',
  })
  requestId: string;
}

/**
 * DTO for the response of the synchronous pipeline start endpoint.
 */
export class SyncResponseDto {
  @ApiProperty({
    example: 'ФИНАЛЬНЫЙ ОТЧЁТ...',
    description: 'The full final report generated by the pipeline.',
  })
  fullResponse: string;

  @ApiProperty({
    example: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d',
    description: 'The unique ID of the job in the queue.',
  })
  jobId: string;

  @ApiProperty({
    example: 'unique-client-request-id-12345',
    description: 'The request ID provided by the client for idempotency.',
  })
  requestId: string;
}

/**
 * DTO for the response of the job status check endpoint.
 */
export class JobStatusDto {
  @ApiProperty({
    example: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d',
    description: 'The unique ID of the job in the queue.',
  })
  jobId: string;

  @ApiProperty({
    example: 'completed',
    description: 'Can be: waiting, active, completed, failed, delayed.',
  })
  state: string;

  @ApiProperty({
    example: 0,
    description: 'Job progress (if implemented).',
  })
  progress: number;

  @ApiProperty({
    description: 'The return value of the job. Can be a final report string or an object.',
    nullable: true,
    example: { finalReport: '...', requestId: '...' }
  })
  result: any | null;

  @ApiProperty({
    example: null,
    description: 'The reason the job failed, if applicable.',
    nullable: true,
  })
  failedReason: string | null;
}

/**
 * DTO for the full pipeline result retrieved from MongoDB.
 * This class describes the structure of the PipelineRun document.
 */
export class PipelineResultDto {
  @ApiProperty({
    example: '68ac3f0b2d2e0264464699ed',
    description: 'The unique ID of the document in MongoDB.',
  })
  _id: string;

  @ApiProperty({
    example: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d',
    description: 'The unique ID of the job in the queue.',
  })
  jobId: string;

  @ApiProperty({
    example: 'unique-client-request-id-12345',
    description: 'The idempotency key provided by the client.',
  })
  requestId: string;

  @ApiProperty({
    example: 'completed',
    description: 'The final status of the pipeline run.',
  })
  status: string;

  @ApiProperty({ example: 'NVIDIA' })
  companyName: string;

  @ApiProperty({ example: 'GPU and AI Hardware Manufacturing' })
  businessDomain: string;

  @ApiProperty({
    description: 'An object containing the outputs of intermediate agent steps.',
    type: 'object',
    additionalProperties: true,
    example: {
      identification: 'Customer identified: EPAM Systems...',
      osint: 'OSINT research for EPAM Systems...',
      parsing: 'Intermediary: Tech Solutions...',
    },
  })
  intermediateSteps: Record<string, any>;

  @ApiProperty({
    example: 'ФИНАЛЬНЫЙ ОТЧЁТ...',
    description: 'The full final report.',
    nullable: true,
  })
  finalReport?: string;

  @ApiProperty({
    example: null,
    description: 'The error message if the job failed.',
    nullable: true,
  })
  errorMessage?: string;

  @ApiProperty({ description: 'The timestamp when the document was created.' })
  createdAt: Date;

  @ApiProperty({
    description: 'The timestamp when the document was last updated.',
  })
  updatedAt: Date;
}
